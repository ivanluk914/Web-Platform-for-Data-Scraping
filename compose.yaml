services:
  postgres:
    image: postgres:16.4-alpine
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d myapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # frontend:
  #   build:
  #     context: .
  #     dockerfile: ./frontend/Dockerfile
  #   ports:
  #     - "5173:5173"
  #   depends_on:
  #     api:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5173"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  
  api:
    build:
      context: .
      dockerfile: ./backend/admin-api/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ENV=local
      - Auth0ClientID=
      - Auth0ClientSecret=
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      scylla-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  scylla:
    image: scylladb/scylla:6.1.2
    command: 
      - --smp 1
      - --memory 750M
    volumes:
      - ./infra/docker/scylla/:/scylla_init/
    ports:
      - "9042:9042"
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe keyspaces'"]
      interval: 30s
      timeout: 10s
      retries: 5

  scylla-init:
    image: scylladb/scylla:6.1.2
    volumes:
      - ./infra/docker/scylla/:/scylla_init/
    entrypoint: "/scylla_init/init.sh"
    depends_on:
      scylla:
        condition: service_healthy
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.111.0
    command: ["--config=/etc/otel-collector.yaml"]
    volumes:
      - ./infra/docker/otel/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - 4317:4317

  prometheus:
    image: prom/prometheus:v2.54.1
    volumes:
      - ./infra/docker/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  jaeger:
    image: jaegertracing/all-in-one:1.62.0
    ports:
      - 16686:16686
  
  loki:
    image: grafana/loki:3.2.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:3.2.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infra/docker/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml

  grafana:
    image: grafana/grafana:11.2.2
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    ports:
      - "3000:3000"

volumes:
  postgres_data: